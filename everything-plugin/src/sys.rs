/* automatically generated by rust-bindgen 0.72.0 */

//! Reference: https://www.voidtools.com/forum/viewtopic.php?t=16535
#![allow(non_snake_case, non_camel_case_types, dead_code)]

pub const EVERYTHING_PLUGIN_LOCALIZATION_EVERYTHING: u32 = 0;
pub const EVERYTHING_PLUGIN_LOCALIZATION_OK: u32 = 4;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SEARCH_EVERYTHING: u32 = 97;
pub const EVERYTHING_PLUGIN_LOCALIZATION_NAME: u32 = 101;
pub const EVERYTHING_PLUGIN_LOCALIZATION_PATH: u32 = 102;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SIZE: u32 = 103;
pub const EVERYTHING_PLUGIN_LOCALIZATION_DATE_MODIFIED: u32 = 104;
pub const EVERYTHING_PLUGIN_LOCALIZATION_TEXT_FILES: u32 = 112;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ALL_FILES: u32 = 113;
pub const EVERYTHING_PLUGIN_LOCALIZATION_KB: u32 = 114;
pub const EVERYTHING_PLUGIN_LOCALIZATION_CANCEL: u32 = 172;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER: u32 = 177;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER: u32 = 178;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_PORT: u32 = 260;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_PORT_HELP: u32 = 261;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_PASSWORD: u32 = 262;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_PASSWORD_HELP: u32 = 263;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_ETP_SERVER_LOGGING: u32 = 268;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_ETP_SERVER_LOGGING_HELP: u32 = 269;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_LOG_FILE: u32 = 270;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_LOG_FILE_HELP: u32 = 271;
pub const EVERYTHING_PLUGIN_LOCALIZATION_START_ETP_SERVER_ON_STARTUP: u32 = 272;
pub const EVERYTHING_PLUGIN_LOCALIZATION_START_ETP_SERVER_ON_STARTUP_HELP: u32 = 273;
pub const EVERYTHING_PLUGIN_LOCALIZATION_BROWSE_FOR_THE_ETP_SERVER_LOG_FILE: u32 = 274;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_LOG_MAX_SIZE_HELP: u32 = 275;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SAVE_ETP_SERVER_LOG_FILE: u32 = 277;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_PORT: u32 = 278;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_PORT_HELP: u32 = 279;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_USERNAME: u32 = 280;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_USERNAME_HELP: u32 = 281;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_PASSWORD: u32 = 282;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_PASSWORD_HELP: u32 = 283;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_HTTP_SERVER_LOGGING: u32 = 284;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_HTTP_SERVER_LOGGING_HELP: u32 = 285;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_LOG_FILE: u32 = 286;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_LOG_FILE_HELP: u32 = 287;
pub const EVERYTHING_PLUGIN_LOCALIZATION_BROWSE_FOR_THE_HTTP_SERVER_LOG_FILE: u32 = 290;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_LOG_MAX_SIZE: u32 = 291;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SAVE_HTTP_SERVER_LOG_FILE: u32 = 293;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_ALLOW_FILE_DOWNLOAD: u32 = 350;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_ALLOW_FILE_DOWNLOAD_HELP: u32 = 351;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_ALLOW_FILE_DOWNLOAD: u32 = 352;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_ALLOW_FILE_DOWNLOAD_HELP: u32 = 353;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_USERNAME: u32 = 358;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_USERNAME_HELP: u32 = 359;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_INDEX_OF: u32 = 1070;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_UP_ONE_DIRECTORY: u32 = 1071;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_ONE_RESULT_FORMAT: u32 = 1072;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_X_RESULTS_FORMAT: u32 = 1073;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_X_TO_Y_OF_Z_RESULTS_FORMAT: u32 = 1074;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_PREVIOUS: u32 = 1075;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_NEXT: u32 = 1076;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_BINDINGS: u32 = 1077;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_BINDINGS_HELP: u32 = 1078;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_TITLE_FORMAT: u32 = 1079;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_LOG_FILE_BROWSE: u32 = 1080;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SERVE_PAGES_FROM: u32 = 1081;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SERVE_PAGES_FROM_HELP: u32 = 1082;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SERVE_PAGES_FROM_BROWSE: u32 = 1083;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SERVE_PAGES_FROM_BROWSE_HELP: u32 = 1084;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_DEFAULT_PAGE: u32 = 1085;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_DEFAULT_PAGE_HELP: u32 = 1086;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_DEFAULT_PAGE_BROWSE: u32 = 1087;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_DEFAULT_PAGE_BROWSE_HELP: u32 = 1088;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_MAX_LOG_SIZE: u32 = 1089;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_RESTORE_DEFAULTS: u32 = 1090;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_RESTORE_DEFAULTS_HELP: u32 = 1091;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SELECT_HOME_CAPTION: u32 = 1092;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_SELECT_DEFAULT_PAGE_CAPTION: u32 = 1093;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_BINDINGS: u32 = 1094;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_BINDINGS_HELP: u32 = 1095;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_MAX_LOG_SIZE: u32 = 1096;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_LOG_FILE_BROWSE: u32 = 1097;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_RESTORE_DEFAULTS: u32 = 1098;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_RESTORE_DEFAULTS_HELP: u32 = 1099;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_ERROR_FORMAT: u32 = 1100;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_ERROR_FORMAT: u32 = 1101;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_CLIENT_ERROR_FORMAT: u32 = 1102;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_CLIENT_DISCONNECTED_FORMAT: u32 = 1103;
pub const EVERYTHING_PLUGIN_LOCALIZATION_LISTEN_FAILED_FORMAT: u32 = 1114;
pub const EVERYTHING_PLUGIN_LOCALIZATION_BIND_FAILED_FORMAT: u32 = 1115;
pub const EVERYTHING_PLUGIN_LOCALIZATION_CONNECT_FAILED_FORMAT: u32 = 1116;
pub const EVERYTHING_PLUGIN_LOCALIZATION_GETADDRINFO_FAILED_FORMAT: u32 = 1117;
pub const EVERYTHING_PLUGIN_LOCALIZATION_CONNECTION_CLOSED_BY_SERVER: u32 = 1118;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SOCKET_FAILED_FORMAT: u32 = 1119;
pub const EVERYTHING_PLUGIN_LOCALIZATION_WSASTARTUP_FAILED_FORMAT: u32 = 1120;
pub const EVERYTHING_PLUGIN_LOCALIZATION_UNSUPPORTED_WSADATA_FORMAT: u32 = 1121;
pub const EVERYTHING_PLUGIN_LOCALIZATION_RECV_FAILED_FORMAT: u32 = 1122;
pub const EVERYTHING_PLUGIN_LOCALIZATION_SEND_FAILED_FORMAT: u32 = 1123;
pub const EVERYTHING_PLUGIN_LOCALIZATION_NO_MORE_ADDRINFO: u32 = 1124;
pub const EVERYTHING_PLUGIN_LOCALIZATION_INVALID_USERNAME_OR_PASSWORD: u32 = 1125;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_ETP_SERVER: u32 = 1156;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_ETP_SERVER_HELP: u32 = 1157;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_HTTP_SERVER: u32 = 1158;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ENABLE_HTTP_SERVER_HELP: u32 = 1159;
pub const EVERYTHING_PLUGIN_LOCALIZATION_HTTP_SERVER_DESCRIPTION: u32 = 2398;
pub const EVERYTHING_PLUGIN_LOCALIZATION_ETP_SERVER_DESCRIPTION: u32 = 2399;
pub const EVERYTHING_PLUGIN_LOCALIZATION_EVERYTHING_SERVER: u32 = 2400;
pub const EVERYTHING_PLUGIN_LOCALIZATION_EVERYTHING_SERVER_DESCRIPTION: u32 = 2401;
pub const EVERYTHING_PLUGIN_LOCALIZATION_PLUGIN_LINK: u32 = 2402;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_IPPROTO_TCP: u32 = 6;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_SOCK_STREAM: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_AI_PASSIVE: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_AF_INET: u32 = 2;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_AF_INET6: u32 = 23;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_SOMAXCONN: u32 = 2147483647;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_READ_BIT: u32 = 0;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_READ: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_WRITE_BIT: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_WRITE: u32 = 2;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_ACCEPT_BIT: u32 = 3;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_ACCEPT: u32 = 8;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_CONNECT_BIT: u32 = 4;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_CONNECT: u32 = 16;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_CLOSE_BIT: u32 = 5;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_CLOSE: u32 = 32;
pub const EVERYTHING_PLUGIN_OS_WSADESCRIPTION_LEN: u32 = 256;
pub const EVERYTHING_PLUGIN_OS_WSASYS_STATUS_LEN: u32 = 128;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_SD_SEND: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_SS_MAXSIZE: u32 = 128;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_PF_INET: u32 = 2;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_PF_INET6: u32 = 23;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_AF_UNSPEC: u32 = 0;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_PF_UNSPEC: u32 = 0;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_WSA_MAXIMUM_WAIT_EVENTS: u32 = 64;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_WSA_IO_PENDING: u32 = 997;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_FD_MAX_EVENTS: u32 = 10;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_WSA_WAIT_TIMEOUT: u32 = 258;
pub const EVERYTHING_PLUGIN_OS_WINSOCK_SOCKET_ERROR: i32 = -1;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_RESULTS_CHANGED: u32 = 0;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_STATUS_CHANGED: u32 = 1;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_FILE_INFO_CHANGED: u32 = 2;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_READY: u32 = 3;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_ACCESS_DENIED: u32 = 4;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_QUERY_COMPLETE: u32 = 5;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_SORT_COMPLETE: u32 = 6;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_QUERY_START: u32 = 7;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_SORT_START: u32 = 8;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_ON_LOADED: u32 = 9;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_ON_INDEX_CANCELLED: u32 = 10;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_TREEVIEW_CHANGED: u32 = 11;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_TREEVIEW_PROPERTY_CHANGED: u32 = 12;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_TREEVIEW_SELECTION_CHANGED: u32 = 13;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_TREEVIEW_CLEARED: u32 = 14;
pub const EVERYTHING_PLUGIN_DB_QUERY_EVENT_OFFLINE_CHANGED: u32 = 15;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_NONE: u32 = 0;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_DUPLICATED_ONLY: u32 = 1;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_DUPLICATED_ONLY_NOCASE: u32 = 2;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_UNIQUE: u32 = 3;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_UNIQUE_NOCASE: u32 = 4;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_DISTINCT: u32 = 5;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_DISTINCT_NOCASE: u32 = 6;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_NOT_DISTINCT: u32 = 7;
pub const EVERYTHING_PLUGIN_DB_QUERY_FIND_DUPLICATES_NOT_DISTINCT_NOCASE: u32 = 8;
pub const EVERYTHING_PLUGIN_CONFIG_SIZE_STANDARD_JEDEC: u32 = 0;
pub const EVERYTHING_PLUGIN_CONFIG_SIZE_STANDARD_IEC: u32 = 1;
pub const EVERYTHING_PLUGIN_CONFIG_SIZE_STANDARD_METRIC: u32 = 2;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_NAME: u32 = 0;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_PATH: u32 = 1;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_SIZE: u32 = 2;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_EXTENSION: u32 = 3;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_TYPE: u32 = 4;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_DATE_MODIFIED: u32 = 5;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_DATE_CREATED: u32 = 6;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_DATE_ACCESSED: u32 = 7;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_ATTRIBUTES: u32 = 8;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_DATE_RECENTLY_CHANGED: u32 = 9;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_RUN_COUNT: u32 = 10;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_DATE_RUN: u32 = 11;
pub const EVERYTHING_PLUGIN_PROPERTY_TYPE_FILE_LIST_FILENAME: u32 = 12;
pub const EVERYTHING_PLUGIN_PM_INIT: u32 = 1;
pub const EVERYTHING_PLUGIN_PM_GET_PLUGIN_VERSION: u32 = 2;
pub const EVERYTHING_PLUGIN_PM_GET_NAME: u32 = 3;
pub const EVERYTHING_PLUGIN_PM_GET_DESCRIPTION: u32 = 4;
pub const EVERYTHING_PLUGIN_PM_GET_AUTHOR: u32 = 5;
pub const EVERYTHING_PLUGIN_PM_GET_VERSION: u32 = 6;
pub const EVERYTHING_PLUGIN_PM_GET_LINK: u32 = 7;
pub const EVERYTHING_PLUGIN_PM_START: u32 = 8;
pub const EVERYTHING_PLUGIN_PM_STOP: u32 = 9;
pub const EVERYTHING_PLUGIN_PM_KILL: u32 = 10;
pub const EVERYTHING_PLUGIN_PM_UNINSTALL: u32 = 11;
pub const EVERYTHING_PLUGIN_PM_ADD_OPTIONS_PAGES: u32 = 12;
pub const EVERYTHING_PLUGIN_PM_LOAD_OPTIONS_PAGE: u32 = 13;
pub const EVERYTHING_PLUGIN_PM_SAVE_OPTIONS_PAGE: u32 = 14;
pub const EVERYTHING_PLUGIN_PM_GET_OPTIONS_PAGE_MINMAX: u32 = 15;
pub const EVERYTHING_PLUGIN_PM_SIZE_OPTIONS_PAGE: u32 = 16;
pub const EVERYTHING_PLUGIN_PM_OPTIONS_PAGE_PROC: u32 = 17;
pub const EVERYTHING_PLUGIN_PM_KILL_OPTIONS_PAGE: u32 = 18;
pub const EVERYTHING_PLUGIN_PM_SAVE_SETTINGS: u32 = 19;
pub const EVERYTHING_PLUGIN_VERSION: u32 = 1;
pub const EVERYTHING_PLUGIN_OS_DLG_STATIC_SEPARATOR: u32 = 3;
pub const EVERYTHING_PLUGIN_OS_DLG_SEPARATOR: u32 = 6;
pub const EVERYTHING_PLUGIN_OS_DLG_STATIC_HIGH: u32 = 15;
pub const EVERYTHING_PLUGIN_OS_DLG_BUTTON_HIGH: u32 = 23;
pub const EVERYTHING_PLUGIN_OS_DLG_EDIT_HIGH: u32 = 21;
pub const EVERYTHING_PLUGIN_OS_DLG_COMBOBOX_HIGH: u32 = 21;
pub const EVERYTHING_PLUGIN_OS_DLG_DATETIME_HIGH: u32 = 21;
pub const EVERYTHING_PLUGIN_OS_DLG_CHECKBOX_HIGH: u32 = 15;
pub const EVERYTHING_PLUGIN_OS_DLG_3CONFIG_CHECKBOX_HIGH: u32 = 15;
pub const EVERYTHING_PLUGIN_OS_DLG_RADIO_BUTTON_HIGH: u32 = 15;
pub const EVERYTHING_PLUGIN_DWORD_MAX: u32 = 4294967295;
pub const EVERYTHING_PLUGIN_UTF8_BUF_STACK_SIZE: u32 = 260;
pub const EVERYTHING_PLUGIN_ANSI_BUF_STACK_SIZE: u32 = 260;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_CASE: u32 = 1;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_WHOLEWORD: u32 = 2;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_PATH: u32 = 4;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_DIACRITICS: u32 = 8;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_REGEX: u32 = 16;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_PREFIX: u32 = 32;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_SUFFIX: u32 = 64;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_IGNORE_PUNCTUATION: u32 = 128;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_IGNORE_WHITESPACE: u32 = 256;
pub const EVERYTHING_PLUGIN_FILTER_FLAG_SORT_DESCENDING: u32 = 512;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWND__"][::std::mem::size_of::<HWND__>() - 4usize];
    ["Alignment of HWND__"][::std::mem::align_of::<HWND__>() - 4usize];
    ["Offset of field: HWND__::unused"][::std::mem::offset_of!(HWND__, unused) - 0usize];
};
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::Offset"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, Offset) - 0usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::OffsetHigh"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, OffsetHigh) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1::Pointer"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1, Pointer) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED"][::std::mem::size_of::<_OVERLAPPED>() - 32usize];
    ["Alignment of _OVERLAPPED"][::std::mem::align_of::<_OVERLAPPED>() - 8usize];
    ["Offset of field: _OVERLAPPED::Internal"]
        [::std::mem::offset_of!(_OVERLAPPED, Internal) - 0usize];
    ["Offset of field: _OVERLAPPED::InternalHigh"]
        [::std::mem::offset_of!(_OVERLAPPED, InternalHigh) - 8usize];
    ["Offset of field: _OVERLAPPED::hEvent"][::std::mem::offset_of!(_OVERLAPPED, hEvent) - 24usize];
};
pub type EVERYTHING_PLUGIN_QWORD = ::std::os::raw::c_ulonglong;
pub type EVERYTHING_PLUGIN_OS_WINSOCK_SOCKET = usize;
pub type everything_plugin_utf8_t = BYTE;
pub type everything_plugin_db_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_query_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_query_t = everything_plugin_db_query_s;
pub type everything_plugin_output_stream_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_thread_s {
    _unused: [u8; 0],
}
pub type everything_plugin_os_thread_t = everything_plugin_os_thread_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_find_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_find_t = everything_plugin_db_find_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_ini_s {
    _unused: [u8; 0],
}
pub type everything_plugin_ini_t = everything_plugin_ini_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_property_s {
    _unused: [u8; 0],
}
pub type everything_plugin_property_t = everything_plugin_property_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_snapshot_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_snapshot_t = everything_plugin_db_snapshot_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_timer_s {
    _unused: [u8; 0],
}
pub type everything_plugin_timer_t = everything_plugin_timer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_remap_array_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_remap_array_t = everything_plugin_db_remap_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_snapshot_file_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_snapshot_file_t = everything_plugin_db_snapshot_file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_journal_file_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_journal_file_t = everything_plugin_db_journal_file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_journal_notification_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_journal_notification_t = everything_plugin_db_journal_notification_s;
pub type everything_plugin_get_proc_address_t = ::std::option::Option<
    unsafe extern "system" fn(name: *const everything_plugin_utf8_t) -> *mut ::std::os::raw::c_void,
>;
pub type EVERYTHING_PLUGIN_OS_WINSOCK_LPWSAOVERLAPPED = *mut _OVERLAPPED;
pub type EVERYTHING_PLUGIN_OS_WINSOCK_LPWSAOVERLAPPED_COMPLETION_ROUTINE = ::std::option::Option<
    unsafe extern "system" fn(
        dwError: DWORD,
        cbTransferred: DWORD,
        lpOverlapped: EVERYTHING_PLUGIN_OS_WINSOCK_LPWSAOVERLAPPED,
        dwFlags: DWORD,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_db_remap_list_s {
    _unused: [u8; 0],
}
pub type everything_plugin_db_remap_list_t = everything_plugin_db_remap_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_utf8_buf_s {
    #[doc = "pointer to data."]
    pub buf: *mut everything_plugin_utf8_t,
    #[doc = "length in bytes of buf excluding null terminator."]
    pub len: usize,
    #[doc = "the available size in buf.\nif set to 0, then buf points to a external const buffer."]
    pub size: usize,
    #[doc = "a temp buffer"]
    pub stack: [everything_plugin_utf8_t; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_utf8_buf_s"]
        [::std::mem::size_of::<everything_plugin_utf8_buf_s>() - 288usize];
    ["Alignment of everything_plugin_utf8_buf_s"]
        [::std::mem::align_of::<everything_plugin_utf8_buf_s>() - 8usize];
    ["Offset of field: everything_plugin_utf8_buf_s::buf"]
        [::std::mem::offset_of!(everything_plugin_utf8_buf_s, buf) - 0usize];
    ["Offset of field: everything_plugin_utf8_buf_s::len"]
        [::std::mem::offset_of!(everything_plugin_utf8_buf_s, len) - 8usize];
    ["Offset of field: everything_plugin_utf8_buf_s::size"]
        [::std::mem::offset_of!(everything_plugin_utf8_buf_s, size) - 16usize];
    ["Offset of field: everything_plugin_utf8_buf_s::stack"]
        [::std::mem::offset_of!(everything_plugin_utf8_buf_s, stack) - 24usize];
};
pub type everything_plugin_utf8_buf_t = everything_plugin_utf8_buf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_fileinfo_fd_s {
    pub size: EVERYTHING_PLUGIN_QWORD,
    pub date_created: EVERYTHING_PLUGIN_QWORD,
    pub date_modified: EVERYTHING_PLUGIN_QWORD,
    pub date_accessed: EVERYTHING_PLUGIN_QWORD,
    pub attributes: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_fileinfo_fd_s"]
        [::std::mem::size_of::<everything_plugin_fileinfo_fd_s>() - 40usize];
    ["Alignment of everything_plugin_fileinfo_fd_s"]
        [::std::mem::align_of::<everything_plugin_fileinfo_fd_s>() - 8usize];
    ["Offset of field: everything_plugin_fileinfo_fd_s::size"]
        [::std::mem::offset_of!(everything_plugin_fileinfo_fd_s, size) - 0usize];
    ["Offset of field: everything_plugin_fileinfo_fd_s::date_created"]
        [::std::mem::offset_of!(everything_plugin_fileinfo_fd_s, date_created) - 8usize];
    ["Offset of field: everything_plugin_fileinfo_fd_s::date_modified"]
        [::std::mem::offset_of!(everything_plugin_fileinfo_fd_s, date_modified) - 16usize];
    ["Offset of field: everything_plugin_fileinfo_fd_s::date_accessed"]
        [::std::mem::offset_of!(everything_plugin_fileinfo_fd_s, date_accessed) - 24usize];
    ["Offset of field: everything_plugin_fileinfo_fd_s::attributes"]
        [::std::mem::offset_of!(everything_plugin_fileinfo_fd_s, attributes) - 32usize];
};
pub type everything_plugin_fileinfo_fd_t = everything_plugin_fileinfo_fd_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_load_options_page_s {
    #[doc = "the userdata supplied in PLUGIN_EM_CREATE_OPTIONS_PAGE."]
    pub user_data: *mut ::std::os::raw::c_void,
    #[doc = "the page window handle."]
    pub page_hwnd: HWND,
    #[doc = "the tooltip hwnd."]
    pub tooltip_hwnd: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_load_options_page_s"]
        [::std::mem::size_of::<everything_plugin_load_options_page_s>() - 24usize];
    ["Alignment of everything_plugin_load_options_page_s"]
        [::std::mem::align_of::<everything_plugin_load_options_page_s>() - 8usize];
    ["Offset of field: everything_plugin_load_options_page_s::user_data"]
        [::std::mem::offset_of!(everything_plugin_load_options_page_s, user_data) - 0usize];
    ["Offset of field: everything_plugin_load_options_page_s::page_hwnd"]
        [::std::mem::offset_of!(everything_plugin_load_options_page_s, page_hwnd) - 8usize];
    ["Offset of field: everything_plugin_load_options_page_s::tooltip_hwnd"]
        [::std::mem::offset_of!(everything_plugin_load_options_page_s, tooltip_hwnd) - 16usize];
};
pub type everything_plugin_load_options_page_t = everything_plugin_load_options_page_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_options_page_proc_s {
    pub user_data: *mut ::std::os::raw::c_void,
    pub options_hwnd: HWND,
    pub page_hwnd: HWND,
    pub msg: ::std::os::raw::c_int,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub result: LRESULT,
    pub handled: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_options_page_proc_s"]
        [::std::mem::size_of::<everything_plugin_options_page_proc_s>() - 64usize];
    ["Alignment of everything_plugin_options_page_proc_s"]
        [::std::mem::align_of::<everything_plugin_options_page_proc_s>() - 8usize];
    ["Offset of field: everything_plugin_options_page_proc_s::user_data"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, user_data) - 0usize];
    ["Offset of field: everything_plugin_options_page_proc_s::options_hwnd"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, options_hwnd) - 8usize];
    ["Offset of field: everything_plugin_options_page_proc_s::page_hwnd"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, page_hwnd) - 16usize];
    ["Offset of field: everything_plugin_options_page_proc_s::msg"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, msg) - 24usize];
    ["Offset of field: everything_plugin_options_page_proc_s::wParam"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, wParam) - 32usize];
    ["Offset of field: everything_plugin_options_page_proc_s::lParam"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, lParam) - 40usize];
    ["Offset of field: everything_plugin_options_page_proc_s::result"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, result) - 48usize];
    ["Offset of field: everything_plugin_options_page_proc_s::handled"]
        [::std::mem::offset_of!(everything_plugin_options_page_proc_s, handled) - 56usize];
};
pub type everything_plugin_options_page_proc_t = everything_plugin_options_page_proc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct http_server_everything_plugin_proc_s {
    pub name: *const everything_plugin_utf8_t,
    pub proc_address_ptr: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of http_server_everything_plugin_proc_s"]
        [::std::mem::size_of::<http_server_everything_plugin_proc_s>() - 16usize];
    ["Alignment of http_server_everything_plugin_proc_s"]
        [::std::mem::align_of::<http_server_everything_plugin_proc_s>() - 8usize];
    ["Offset of field: http_server_everything_plugin_proc_s::name"]
        [::std::mem::offset_of!(http_server_everything_plugin_proc_s, name) - 0usize];
    ["Offset of field: http_server_everything_plugin_proc_s::proc_address_ptr"]
        [::std::mem::offset_of!(http_server_everything_plugin_proc_s, proc_address_ptr) - 8usize];
};
pub type http_server_everything_plugin_proc_t = http_server_everything_plugin_proc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_save_options_page_s {
    #[doc = "the userdata supplied in PLUGIN_EM_CREATE_OPTIONS_PAGE."]
    pub user_data: *mut ::std::os::raw::c_void,
    pub page_hwnd: HWND,
    #[doc = "set to non-zero to keep apply enabled."]
    pub enable_apply: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_save_options_page_s"]
        [::std::mem::size_of::<everything_plugin_save_options_page_s>() - 24usize];
    ["Alignment of everything_plugin_save_options_page_s"]
        [::std::mem::align_of::<everything_plugin_save_options_page_s>() - 8usize];
    ["Offset of field: everything_plugin_save_options_page_s::user_data"]
        [::std::mem::offset_of!(everything_plugin_save_options_page_s, user_data) - 0usize];
    ["Offset of field: everything_plugin_save_options_page_s::page_hwnd"]
        [::std::mem::offset_of!(everything_plugin_save_options_page_s, page_hwnd) - 8usize];
    ["Offset of field: everything_plugin_save_options_page_s::enable_apply"]
        [::std::mem::offset_of!(everything_plugin_save_options_page_s, enable_apply) - 16usize];
};
pub type everything_plugin_save_options_page_t = everything_plugin_save_options_page_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_get_options_page_minmax_s {
    #[doc = "the userdata supplied in PLUGIN_EM_CREATE_OPTIONS_PAGE."]
    pub user_data: *mut ::std::os::raw::c_void,
    #[doc = "opaque handle to the options window."]
    pub page_hwnd: HWND,
    #[doc = "minimum width and minimum height in logical pixels."]
    pub wide: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_get_options_page_minmax_s"]
        [::std::mem::size_of::<everything_plugin_get_options_page_minmax_s>() - 24usize];
    ["Alignment of everything_plugin_get_options_page_minmax_s"]
        [::std::mem::align_of::<everything_plugin_get_options_page_minmax_s>() - 8usize];
    ["Offset of field: everything_plugin_get_options_page_minmax_s::user_data"]
        [::std::mem::offset_of!(everything_plugin_get_options_page_minmax_s, user_data) - 0usize];
    ["Offset of field: everything_plugin_get_options_page_minmax_s::page_hwnd"]
        [::std::mem::offset_of!(everything_plugin_get_options_page_minmax_s, page_hwnd) - 8usize];
    ["Offset of field: everything_plugin_get_options_page_minmax_s::wide"]
        [::std::mem::offset_of!(everything_plugin_get_options_page_minmax_s, wide) - 16usize];
    ["Offset of field: everything_plugin_get_options_page_minmax_s::high"]
        [::std::mem::offset_of!(everything_plugin_get_options_page_minmax_s, high) - 20usize];
};
pub type everything_plugin_get_options_page_minmax_t = everything_plugin_get_options_page_minmax_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_size_options_page_s {
    #[doc = "the userdata supplied in PLUGIN_EM_CREATE_OPTIONS_PAGE."]
    pub user_data: *mut ::std::os::raw::c_void,
    #[doc = "opaque handle to the options window."]
    pub page_hwnd: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_size_options_page_s"]
        [::std::mem::size_of::<everything_plugin_size_options_page_s>() - 16usize];
    ["Alignment of everything_plugin_size_options_page_s"]
        [::std::mem::align_of::<everything_plugin_size_options_page_s>() - 8usize];
    ["Offset of field: everything_plugin_size_options_page_s::user_data"]
        [::std::mem::offset_of!(everything_plugin_size_options_page_s, user_data) - 0usize];
    ["Offset of field: everything_plugin_size_options_page_s::page_hwnd"]
        [::std::mem::offset_of!(everything_plugin_size_options_page_s, page_hwnd) - 8usize];
};
pub type everything_plugin_size_options_page_t = everything_plugin_size_options_page_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_winsock_addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    #[doc = "EVERYTHING_PLUGIN_OS_WINSOCK_AI_PASSIVE, AI_CANONNAME, OS_WINSOCK_AI_NUMERICHOST"]
    pub ai_family: ::std::os::raw::c_int,
    #[doc = "PF_xxx"]
    pub ai_socktype: ::std::os::raw::c_int,
    #[doc = "SOCK_xxx"]
    pub ai_protocol: ::std::os::raw::c_int,
    #[doc = "0 or IPPROTO_xxx for IPv4 and IPv6"]
    pub ai_addrlen: usize,
    #[doc = "Length of ai_addr"]
    pub ai_canonname: *mut ::std::os::raw::c_char,
    #[doc = "Canonical name for nodename"]
    pub ai_addr: *mut everything_plugin_os_winsock_sockaddr,
    #[doc = "Binary address"]
    pub ai_next: *mut everything_plugin_os_winsock_addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_addrinfo"]
        [::std::mem::size_of::<everything_plugin_os_winsock_addrinfo>() - 48usize];
    ["Alignment of everything_plugin_os_winsock_addrinfo"]
        [::std::mem::align_of::<everything_plugin_os_winsock_addrinfo>() - 8usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_flags"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_flags) - 0usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_family"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_family) - 4usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_socktype"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_socktype) - 8usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_protocol"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_protocol) - 12usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_canonname"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_canonname) - 24usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_addr"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_addr) - 32usize];
    ["Offset of field: everything_plugin_os_winsock_addrinfo::ai_next"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_addrinfo, ai_next) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_winsock_sockaddr_storage {
    pub ss_family: ::std::os::raw::c_short,
    #[doc = "Address family."]
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    #[doc = "6 byte pad, this is to make\nimplementation specific pad up to\nalignment field that follows explicit\nin the data structure."]
    pub __ss_align: ::std::os::raw::c_longlong,
    #[doc = "Field to force desired structure."]
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_sockaddr_storage"]
        [::std::mem::size_of::<everything_plugin_os_winsock_sockaddr_storage>() - 128usize];
    ["Alignment of everything_plugin_os_winsock_sockaddr_storage"]
        [::std::mem::align_of::<everything_plugin_os_winsock_sockaddr_storage>() - 8usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_storage::__ss_align"][::std::mem::offset_of!(
        everything_plugin_os_winsock_sockaddr_storage,
        __ss_align
    ) - 8usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_storage::__ss_pad2"][::std::mem::offset_of!(
        everything_plugin_os_winsock_sockaddr_storage,
        __ss_pad2
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA {
    pub wVersion: WORD,
    pub wHighVersion: WORD,
    pub iMaxSockets: ::std::os::raw::c_ushort,
    pub iMaxUdpDg: ::std::os::raw::c_ushort,
    pub lpVendorInfo: *mut ::std::os::raw::c_char,
    pub szDescription: [::std::os::raw::c_char; 257usize],
    pub szSystemStatus: [::std::os::raw::c_char; 129usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA"]
        [::std::mem::size_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA>() - 408usize];
    ["Alignment of EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA"]
        [::std::mem::align_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA>() - 8usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::wVersion"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, wVersion) - 0usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::wHighVersion"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, wHighVersion) - 2usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::iMaxSockets"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, iMaxSockets) - 4usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::iMaxUdpDg"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, iMaxUdpDg) - 6usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::lpVendorInfo"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, lpVendorInfo) - 8usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::szDescription"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, szDescription) - 16usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA::szSystemStatus"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSADATA, szSystemStatus) - 273usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_utf8_string_s {
    #[doc = "NULL terminated"]
    pub text: *mut everything_plugin_utf8_t,
    #[doc = "length of string in bytes."]
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_utf8_string_s"]
        [::std::mem::size_of::<everything_plugin_utf8_string_s>() - 16usize];
    ["Alignment of everything_plugin_utf8_string_s"]
        [::std::mem::align_of::<everything_plugin_utf8_string_s>() - 8usize];
    ["Offset of field: everything_plugin_utf8_string_s::text"]
        [::std::mem::offset_of!(everything_plugin_utf8_string_s, text) - 0usize];
    ["Offset of field: everything_plugin_utf8_string_s::len"]
        [::std::mem::offset_of!(everything_plugin_utf8_string_s, len) - 8usize];
};
pub type everything_plugin_utf8_string_t = everything_plugin_utf8_string_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_utf8_const_string_s {
    #[doc = "NULL terminated"]
    pub text: *const everything_plugin_utf8_t,
    #[doc = "length of string in bytes."]
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_utf8_const_string_s"]
        [::std::mem::size_of::<everything_plugin_utf8_const_string_s>() - 16usize];
    ["Alignment of everything_plugin_utf8_const_string_s"]
        [::std::mem::align_of::<everything_plugin_utf8_const_string_s>() - 8usize];
    ["Offset of field: everything_plugin_utf8_const_string_s::text"]
        [::std::mem::offset_of!(everything_plugin_utf8_const_string_s, text) - 0usize];
    ["Offset of field: everything_plugin_utf8_const_string_s::len"]
        [::std::mem::offset_of!(everything_plugin_utf8_const_string_s, len) - 8usize];
};
pub type everything_plugin_utf8_const_string_t = everything_plugin_utf8_const_string_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_utf8_basic_string_s {
    #[doc = "length of string in bytes."]
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_utf8_basic_string_s"]
        [::std::mem::size_of::<everything_plugin_utf8_basic_string_s>() - 8usize];
    ["Alignment of everything_plugin_utf8_basic_string_s"]
        [::std::mem::align_of::<everything_plugin_utf8_basic_string_s>() - 8usize];
    ["Offset of field: everything_plugin_utf8_basic_string_s::len"]
        [::std::mem::offset_of!(everything_plugin_utf8_basic_string_s, len) - 0usize];
};
pub type everything_plugin_utf8_basic_string_t = everything_plugin_utf8_basic_string_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_winsock_sockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    #[doc = "address family"]
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_sockaddr"]
        [::std::mem::size_of::<everything_plugin_os_winsock_sockaddr>() - 16usize];
    ["Alignment of everything_plugin_os_winsock_sockaddr"]
        [::std::mem::align_of::<everything_plugin_os_winsock_sockaddr>() - 2usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr::sa_family"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr, sa_family) - 0usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr::sa_data"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct everything_plugin_os_winsock_in6_addr {
    pub u: everything_plugin_os_winsock_in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union everything_plugin_os_winsock_in6_addr__bindgen_ty_1 {
    pub Byte: [::std::os::raw::c_uchar; 16usize],
    pub Word: [::std::os::raw::c_ushort; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_in6_addr__bindgen_ty_1"]
        [::std::mem::size_of::<everything_plugin_os_winsock_in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of everything_plugin_os_winsock_in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<everything_plugin_os_winsock_in6_addr__bindgen_ty_1>() - 2usize];
    ["Offset of field: everything_plugin_os_winsock_in6_addr__bindgen_ty_1::Byte"][::std::mem::offset_of!(
        everything_plugin_os_winsock_in6_addr__bindgen_ty_1,
        Byte
    ) - 0usize];
    ["Offset of field: everything_plugin_os_winsock_in6_addr__bindgen_ty_1::Word"][::std::mem::offset_of!(
        everything_plugin_os_winsock_in6_addr__bindgen_ty_1,
        Word
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_in6_addr"]
        [::std::mem::size_of::<everything_plugin_os_winsock_in6_addr>() - 16usize];
    ["Alignment of everything_plugin_os_winsock_in6_addr"]
        [::std::mem::align_of::<everything_plugin_os_winsock_in6_addr>() - 2usize];
    ["Offset of field: everything_plugin_os_winsock_in6_addr::u"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_in6_addr, u) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct everything_plugin_os_winsock_sockaddr_in6 {
    pub sin6_family: ::std::os::raw::c_short,
    #[doc = "AF_INET6"]
    pub sin6_port: ::std::os::raw::c_ushort,
    #[doc = "Transport level port number"]
    pub sin6_flowinfo: ::std::os::raw::c_ulong,
    #[doc = "IPv6 flow information"]
    pub sin6_addr: everything_plugin_os_winsock_in6_addr,
    #[doc = "IPv6 address"]
    pub sin6_scope_id: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_winsock_sockaddr_in6"]
        [::std::mem::size_of::<everything_plugin_os_winsock_sockaddr_in6>() - 28usize];
    ["Alignment of everything_plugin_os_winsock_sockaddr_in6"]
        [::std::mem::align_of::<everything_plugin_os_winsock_sockaddr_in6>() - 4usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(everything_plugin_os_winsock_sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: everything_plugin_os_winsock_sockaddr_in6::sin6_scope_id"][::std::mem::offset_of!(
        everything_plugin_os_winsock_sockaddr_in6,
        sin6_scope_id
    ) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct everything_plugin_os_in_addr {
    pub S_un: everything_plugin_os_in_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union everything_plugin_os_in_addr__bindgen_ty_1 {
    pub S_un_b: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
    pub S_un_w: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2,
    pub S_addr: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1 {
    pub s_b1: ::std::os::raw::c_uchar,
    pub s_b2: ::std::os::raw::c_uchar,
    pub s_b3: ::std::os::raw::c_uchar,
    pub s_b4: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
    >() - 1usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1::s_b1"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
        s_b1
    ) - 0usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1::s_b2"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
        s_b2
    ) - 1usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1::s_b3"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
        s_b3
    ) - 2usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1::s_b4"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_1,
        s_b4
    ) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2 {
    pub s_w1: ::std::os::raw::c_ushort,
    pub s_w2: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2"][::std::mem::size_of::<
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2,
    >() - 4usize];
    ["Alignment of everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2"][::std::mem::align_of::<
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2,
    >() - 2usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2::s_w1"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2,
        s_w1
    ) - 0usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2::s_w2"][::std::mem::offset_of!(
        everything_plugin_os_in_addr__bindgen_ty_1__bindgen_ty_2,
        s_w2
    ) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_in_addr__bindgen_ty_1"]
        [::std::mem::size_of::<everything_plugin_os_in_addr__bindgen_ty_1>() - 4usize];
    ["Alignment of everything_plugin_os_in_addr__bindgen_ty_1"]
        [::std::mem::align_of::<everything_plugin_os_in_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1::S_un_b"]
        [::std::mem::offset_of!(everything_plugin_os_in_addr__bindgen_ty_1, S_un_b) - 0usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1::S_un_w"]
        [::std::mem::offset_of!(everything_plugin_os_in_addr__bindgen_ty_1, S_un_w) - 0usize];
    ["Offset of field: everything_plugin_os_in_addr__bindgen_ty_1::S_addr"]
        [::std::mem::offset_of!(everything_plugin_os_in_addr__bindgen_ty_1, S_addr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_in_addr"]
        [::std::mem::size_of::<everything_plugin_os_in_addr>() - 4usize];
    ["Alignment of everything_plugin_os_in_addr"]
        [::std::mem::align_of::<everything_plugin_os_in_addr>() - 4usize];
    ["Offset of field: everything_plugin_os_in_addr::S_un"]
        [::std::mem::offset_of!(everything_plugin_os_in_addr, S_un) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct everything_plugin_os_sockaddr_in {
    pub sin_family: ::std::os::raw::c_short,
    pub sin_port: ::std::os::raw::c_ushort,
    pub sin_addr: everything_plugin_os_in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_os_sockaddr_in"]
        [::std::mem::size_of::<everything_plugin_os_sockaddr_in>() - 16usize];
    ["Alignment of everything_plugin_os_sockaddr_in"]
        [::std::mem::align_of::<everything_plugin_os_sockaddr_in>() - 4usize];
    ["Offset of field: everything_plugin_os_sockaddr_in::sin_family"]
        [::std::mem::offset_of!(everything_plugin_os_sockaddr_in, sin_family) - 0usize];
    ["Offset of field: everything_plugin_os_sockaddr_in::sin_port"]
        [::std::mem::offset_of!(everything_plugin_os_sockaddr_in, sin_port) - 2usize];
    ["Offset of field: everything_plugin_os_sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(everything_plugin_os_sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: everything_plugin_os_sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(everything_plugin_os_sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_ansi_buf_s {
    pub buf: *mut ::std::os::raw::c_char,
    pub len: usize,
    pub size: usize,
    pub stack: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_ansi_buf_s"]
        [::std::mem::size_of::<everything_plugin_ansi_buf_s>() - 288usize];
    ["Alignment of everything_plugin_ansi_buf_s"]
        [::std::mem::align_of::<everything_plugin_ansi_buf_s>() - 8usize];
    ["Offset of field: everything_plugin_ansi_buf_s::buf"]
        [::std::mem::offset_of!(everything_plugin_ansi_buf_s, buf) - 0usize];
    ["Offset of field: everything_plugin_ansi_buf_s::len"]
        [::std::mem::offset_of!(everything_plugin_ansi_buf_s, len) - 8usize];
    ["Offset of field: everything_plugin_ansi_buf_s::size"]
        [::std::mem::offset_of!(everything_plugin_ansi_buf_s, size) - 16usize];
    ["Offset of field: everything_plugin_ansi_buf_s::stack"]
        [::std::mem::offset_of!(everything_plugin_ansi_buf_s, stack) - 24usize];
};
pub type everything_plugin_ansi_buf_t = everything_plugin_ansi_buf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct everything_plugin_interlocked_s {
    pub unaligned_a: usize,
    pub unaligned_b: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of everything_plugin_interlocked_s"]
        [::std::mem::size_of::<everything_plugin_interlocked_s>() - 16usize];
    ["Alignment of everything_plugin_interlocked_s"]
        [::std::mem::align_of::<everything_plugin_interlocked_s>() - 8usize];
    ["Offset of field: everything_plugin_interlocked_s::unaligned_a"]
        [::std::mem::offset_of!(everything_plugin_interlocked_s, unaligned_a) - 0usize];
    ["Offset of field: everything_plugin_interlocked_s::unaligned_b"]
        [::std::mem::offset_of!(everything_plugin_interlocked_s, unaligned_b) - 8usize];
};
pub type everything_plugin_interlocked_t = everything_plugin_interlocked_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF {
    pub len: ::std::os::raw::c_ulong,
    #[doc = "the length of the buffer"]
    pub buf: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF"]
        [::std::mem::size_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF>() - 16usize];
    ["Alignment of EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF"]
        [::std::mem::align_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF>() - 8usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF::len"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF, len) - 0usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF::buf"]
        [::std::mem::offset_of!(EVERYTHING_PLUGIN_OS_WINSOCK_WSABUF, buf) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS {
    pub lNetworkEvents: ::std::os::raw::c_long,
    pub iErrorCode: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS"]
        [::std::mem::size_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS>() - 44usize];
    ["Alignment of EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS"]
        [::std::mem::align_of::<EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS>() - 4usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS::lNetworkEvents"][::std::mem::offset_of!(
        EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS,
        lNetworkEvents
    ) - 0usize];
    ["Offset of field: EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS::iErrorCode"][::std::mem::offset_of!(
        EVERYTHING_PLUGIN_OS_WINSOCK_WSANETWORKEVENTS,
        iErrorCode
    ) - 4usize];
};
